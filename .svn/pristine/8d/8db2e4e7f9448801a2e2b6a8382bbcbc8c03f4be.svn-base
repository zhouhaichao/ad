package com.smyhvae.fragment;

import android.app.DatePickerDialog;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.text.Editable;
import android.text.InputType;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.format.DateFormat;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.CompoundButton;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;

import com.smyhvae.model.FuBaseModel;
import com.smyhvae.model.FuClientModel;
import com.smyhvae.model.FuSalesBillDetailModel;
import com.smyhvae.model.FuSalesBillModel;
import com.smyhvae.model.FuStyleModel;
import com.smyhvae.model.FuStylePriceTypeModel;
import com.smyhvae.myapplication.AddClientActivity;
import com.smyhvae.myapplication.ColorSizeActivity;
import com.smyhvae.myapplication.MyApplication;
import com.smyhvae.myapplication.PaymentActivity;
import com.smyhvae.myapplication.R;
import com.smyhvae.service.BaseService;
import com.smyhvae.service.StyleService;
import com.smyhvae.util.BigDecimalUtil;
import com.smyhvae.util.DataUtil;
import com.smyhvae.util.DialogUtil;
import com.smyhvae.util.Logcat;
import com.smyhvae.view.MyAdapter;

import java.io.Serializable;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import static android.app.Activity.RESULT_OK;


public class AddSalesBillFragment extends Fragment implements View.OnClickListener {



    private RelativeLayout salesbill_listtable;

    private MyApplication application;
    private String accessKey;
    private int accountid;
    private int loginstaffid;
    private int logininvid;
    private String webServerUrl;
    private TextView tv_addSalesBill;
    private View view;
    int w_screen=0;
    int h_screen=0;

    private LinearLayout lay3;
    private EditText et_clientid;
    private TextView addClient;
    private TextView tv_arrears;
    private EditText arrears;
    private EditText occurencetime;
    private EditText et_staffid;
    private EditText discount;
    private EditText remark;

    private TableLayout tableLayout;

    private EditText editText;

    private ListView mListView;
    private ListView staffView;
    private ListView styleView;
    private LinearLayout listStyle;
    private List<FuBaseModel> testArray = new ArrayList<>();
    private MyAdapter clientAdapter;
    private MyAdapter staffAdapter;
    private MyAdapter styleAdapter;
    private String result;
    private Integer clientid;
    private Integer staffid;
    private Integer styleid;
    private String priceTypeString;
    private Integer priceTypeid;
    private Integer clientPriceTypeId;

    private List<FuSalesBillDetailModel> fuSalesBillDetailModelList = new ArrayList<>();
    private List<FuBaseModel> priceTypeList = new ArrayList<>();

    private BigDecimalUtil  bigDecimalUtil = new BigDecimalUtil();
    private FuSalesBillModel salesBillModel = new FuSalesBillModel();

    private boolean flag = true;
    private boolean doClientForAc = true;
    private Handler mhandler = null;

    private TextView sum_id;
    private TextView sumamountdetail;
    private TextView sum_num;
    private TextView sum_money;

    private int numberber = 0;
    private BigDecimal totlele = new BigDecimal(0);
    private int salesAmount = 0;
    private int cancelAmount = 0;
    private List<FuSalesBillDetailModel> templist;
    private RadioGroup radioGroup;

    private Handler handler1 = new Handler() {

        public void handleMessage(Message msg) {
            DataUtil dataUtil = new DataUtil();
            FuBaseModel baseModel = dataUtil.message(msg.obj.toString());

            if(baseModel.getResultCode().intValue() ==1){
                priceTypeList = dataUtil.getList(msg.obj.toString());
                radioGroup = new RadioGroup(getActivity());
                radioGroup.setOrientation(LinearLayout.HORIZONTAL);
                for (int i=0; i<priceTypeList.size(); i++){
                    final FuBaseModel fuBaseModel = priceTypeList.get(i);
                    final RadioButton radioButton = new RadioButton(getActivity());
                    radioButton.setText(fuBaseModel.getName());
                    radioGroup.addView(radioButton);
                    radioButton.setId(fuBaseModel.getId());
                    if (i==0){
                        priceTypeString = radioButton.getText().toString();
                        priceTypeid = fuBaseModel.getId();
                    }

                    radioButton.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                        @Override
                        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                            RadioButton cb = (RadioButton) buttonView;
                            if (isChecked) {
                                priceTypeString = cb.getText().toString();
                                priceTypeid = fuBaseModel.getId();
                            }
                        }
                    });
                }
                radioGroup.check(priceTypeid);
                if (clientPriceTypeId != null){
                    radioGroup.check(clientPriceTypeId);
                }
                lay3.addView(radioGroup);
            }else if(baseModel.getResultCode().intValue() ==0){
                DialogUtil.showDialog(getContext(), baseModel.getMessage(), false);
            }
        }
    };


    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        application = (MyApplication) getActivity().getApplicationContext();
        accessKey = application.getAccessKey();
        accountid = application.getFuStaffModel().getAccountid();
        loginstaffid = application.getFuStaffModel().getId();
        logininvid = application.getFuStaffModel().getFuInventoryList().get(0).getId();
        webServerUrl = application.getWebServerUrl();
        DisplayMetrics dm =getResources().getDisplayMetrics();
        w_screen = dm.widthPixels;
        h_screen = dm.heightPixels;
        Log.i("屏幕宽度", "屏幕尺寸2：宽度 = " + w_screen + "高度 = " + h_screen + "密度 = " + dm.densityDpi);

        view = inflater.inflate(R.layout.salesbill_listtable, container, false);


        tv_addSalesBill = view.findViewById(R.id.tv_addSalesBill);
        et_clientid = view.findViewById(R.id.et_clientid);
        et_clientid.setWidth(w_screen/3-100);
        et_clientid.setPadding(20, 20, 10, 20);
        addClient = view.findViewById(R.id.addClient);
        tv_arrears = view.findViewById(R.id.tv_arrears);
        arrears = view.findViewById(R.id.arrears);
        arrears.setWidth(w_screen/3-100);
        arrears.setPadding(20, 20, 10, 20);
        arrears.setTextColor(Color.RED);
        occurencetime = view.findViewById(R.id.occurencetime);
        occurencetime.setWidth(w_screen/3-100);
        occurencetime.setPadding(20, 20, 10, 10);
        occurencetime.setFocusable(false);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        occurencetime.setText(sdf.format(new Date()));
        et_staffid = view.findViewById(R.id.et_staffid);
        et_staffid.setWidth(w_screen/3-100);
        et_staffid.setPadding(20, 20, 10, 10);
        discount = view.findViewById(R.id.discount);
        discount.setWidth(w_screen/3-160);
        discount.setPadding(20, 20, 10, 10);
        discount.setInputType(InputType.TYPE_CLASS_PHONE);
        lay3 = view.findViewById(R.id.lay3);
        remark = view.findViewById(R.id.remark);
        remark.setWidth(w_screen/2-100);
        remark.setPadding(20, 20, 10, 10);

        new Thread() {
            public void run() {
                try {
                    BaseService baseService = new BaseService();
                    String result = baseService.doList(webServerUrl, loginstaffid, logininvid, accessKey, accountid, "priceType", "fuPriceTypeList");
                    Logcat.show(result);
                    Message msg = Message.obtain();
                    msg.obj = result;
                    handler1.sendMessage(msg);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }.start();

        RelativeLayout layout = view.findViewById(R.id.salesbill_listtable);
        //客户AC布局
        LinearLayout listClient = new LinearLayout(getActivity());
        LinearLayout.LayoutParams lparams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        lparams.gravity=Gravity.CENTER_HORIZONTAL|Gravity.CENTER_VERTICAL;
        lparams.setMargins(50,100,50,0);
        listClient.setOrientation(LinearLayout.VERTICAL);
        listClient.setLayoutParams(lparams);
        listClient.setBackgroundColor(Color.parseColor("#FFFFFF"));
        mListView = new ListView(getActivity());
        mListView.setVisibility(View.GONE);
        mListView.setBackground(getResources().getDrawable(R.drawable.list_bg));
        listClient.addView(mListView);
        layout.addView(listClient);

        //店员AC布局
        LinearLayout listStaff = new LinearLayout(getActivity());
        LinearLayout.LayoutParams staffparams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        staffparams.gravity=Gravity.CENTER_HORIZONTAL|Gravity.CENTER_VERTICAL;
        staffparams.setMargins(w_screen/3+100,150,10,0);
        listStaff.setOrientation(LinearLayout.VERTICAL);
        listStaff.setLayoutParams(staffparams);
        listStaff.setBackgroundColor(Color.parseColor("#FFFFFF"));
        staffView = new ListView(getActivity());
        staffView.setVisibility(View.GONE);
        staffView.setBackground(getResources().getDrawable(R.drawable.list_bg));
        listStaff.addView(staffView);
        layout.addView(listStaff);

        //输入款号
        LinearLayout acLay = view.findViewById(R.id.acLay);
        editText = view.findViewById(R.id.stylecodeForAc);
        editText.setWidth(w_screen/3-100);
        editText.setPadding(20, 20, 10, 20);
//        editText.setInputType(InputType.TYPE_CLASS_NUMBER);
        editText.setRawInputType(Configuration.KEYBOARD_QWERTY);
//        editText.setKeyListener(new DigitsKeyListener() {
//            @Override
//            public int getInputType() {
//                return InputType.TYPE_CLASS_NUMBER;
//            }
//            @Override
//            protected char[] getAcceptedChars() {
//                char[] data = getStringData(R.string.wordAndNum).toCharArray();
//                return data;
//            }
//        });

        //款AC布局
        listStyle = new LinearLayout(getActivity());
        LinearLayout.LayoutParams styleparams = new LinearLayout.LayoutParams(w_screen-300, 700);
        styleparams.gravity=Gravity.CENTER_HORIZONTAL|Gravity.CENTER_VERTICAL;
        listStyle.setOrientation(LinearLayout.VERTICAL);
        listStyle.setLayoutParams(styleparams);
        listStyle.setBackgroundColor(Color.WHITE);
        styleView = new ListView(getActivity());
        styleView.setVisibility(View.GONE);
        styleView.setBackground(getResources().getDrawable(R.drawable.list_bg));
        listStyle.addView(styleView);
        acLay.addView(listStyle);

        sum_id = view.findViewById(R.id.sum_id);
        sumamountdetail = view.findViewById(R.id.sumamountdetail);
        sum_num = view.findViewById(R.id.sum_num);
        sum_money = view.findViewById(R.id.sum_money);

        getfoottable();

        return view;

    }

    public String getStringData(int id) {
        return getResources().getString(id);
    }

    public static final int  REQUEST_CODE=1001;
    public static final int CODE=0;
    public static final int CLIENT_CODE=2;

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode==REQUEST_CODE && resultCode==RESULT_OK){
            fuSalesBillDetailModelList = (List<FuSalesBillDetailModel>) data.getSerializableExtra("salesBillDetailList");
            appendDetailItemTable();

            if (salesBillDetailList != null){
                sum_id.setText("总计 "+salesBillDetailList.size());
                numberber = 0;
                totlele = new BigDecimal(0);
                salesAmount = 0;
                cancelAmount = 0;
                for (FuSalesBillDetailModel fuSalesBillDetailModel : salesBillDetailList){
                    numberber = numberber + fuSalesBillDetailModel.getAmount();
                    totlele = totlele .add(fuSalesBillDetailModel.getTotal());
                    if (fuSalesBillDetailModel.getAmount().intValue()>0){
                        salesAmount = salesAmount + fuSalesBillDetailModel.getAmount();
                    }
                    if (fuSalesBillDetailModel.getAmount().intValue()<0){
                        cancelAmount = cancelAmount + fuSalesBillDetailModel.getAmount();
                    }
                }
                sum_num.setText(numberber + "");
                sum_money.setText(bigDecimalUtil.getStringUtil(totlele+""));
                sumamountdetail.setText("("+salesAmount+","+cancelAmount+")");

                if (salesBillModel != null){
                    salesBillModel.setTotal(totlele);
                }
            }
        }else if (requestCode==REQUEST_CODE && resultCode==CODE){
            setNull();
        }else if (requestCode==REQUEST_CODE && resultCode==CLIENT_CODE){
            FuClientModel clientModel;
            clientModel = (FuClientModel) data.getSerializableExtra("fuClientModel");
            doClientForAc = false;
            et_clientid.setText(clientModel.getName());
            clientid = clientModel.getId();
            salesBillModel.setClientid(clientid);
            salesBillModel.setClientString(clientModel.getName());
            arrears.setText("0");
            salesBillModel.setArrears(new BigDecimal(0));
            if (clientModel.getStaffName() != null){
                flag = false;
                et_staffid.setText(clientModel.getStaffName());
                salesBillModel.setStaffid(clientModel.getStaffid());
                salesBillModel.setStaffString(clientModel.getStaffName());
            }
            discount.setText(bigDecimalUtil.getStringUtil(clientModel.getDiscount().toString()));
            salesBillModel.setDiscount(clientModel.getDiscount());
            clientPriceTypeId = clientModel.getPricetypeid();
            if (clientPriceTypeId != null){
                radioGroup.check(clientPriceTypeId);
            }
        }
    }

    public void  appendDetailItemTable(){
        ViewTabLay viewTabLay = new ViewTabLay(view);
        tableLayout = viewTabLay.tablay;
        for (FuSalesBillDetailModel fuSalesBillDetailModel : fuSalesBillDetailModelList){
            HorizontalScrollView hsv = new HorizontalScrollView(getActivity());
            hsv.setHorizontalScrollBarEnabled(false);
            TableRow tabRow = new TableRow(getActivity());
            LinearLayout layContent = new LinearLayout(getActivity());
            layContent.setOrientation(LinearLayout.VERTICAL);

            View convertView = addRow(fuSalesBillDetailModel);

            View line = new View(getActivity());
            line.setBackgroundColor(Color.parseColor("#A7A5A5"));
            LinearLayout.LayoutParams lineParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, 1);
            line.setLayoutParams(lineParams);

            layContent.addView(convertView);
            layContent.setTag(convertView.getTag());
            layContent.addView(line);
            tabRow.addView(layContent);
            tabRow.setTag(layContent.getTag());
            hsv.addView(tabRow);
            hsv.setTag(tabRow.getTag());
            tableLayout.addView(hsv);
        }

    }

    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        tv_addSalesBill.setOnClickListener(this);
        addClient.setOnClickListener(this);

        //时间选项卡
        final Calendar c = Calendar.getInstance();
        occurencetime.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {
                DatePickerDialog dialog = new DatePickerDialog(getActivity(), new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                        c.set(year, monthOfYear, dayOfMonth);
                        occurencetime.setText(DateFormat.format("yyy-MM-dd", c));
                    }
                }, c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH));
                dialog.show();
            }
        });

        //客户AC
        clientAdapter = new MyAdapter(getActivity(), testArray);
        mListView.setAdapter(clientAdapter);// 设置Adapter，初始值为空

        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {// listView点击事件
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                clientid = clientAdapter.getItem(position).getId();
                BaseService baseService = new BaseService();
                result = baseService.doSelectClient(webServerUrl, loginstaffid, logininvid, accessKey, accountid, clientid);
                Logcat.show(result);
                DataUtil dataUtil = new DataUtil();
                FuBaseModel baseModel = dataUtil.message(result);
                if(baseModel.getResultCode().intValue() ==1){
                    FuClientModel clientModel = dataUtil.getClientData(result);
                    et_clientid.setText(clientModel.getName());

                    if (clientModel.getArrears().intValue()<0){
                        tv_arrears.setText("余额");
                        arrears.setText(String.valueOf(Math.abs(clientModel.getArrears().intValue())));
                        arrears.setTextColor(Color.parseColor("#006400"));
                    }else{
                        tv_arrears.setText("欠款");
                        arrears.setText(String.valueOf(clientModel.getArrears().intValue()));
                        arrears.setTextColor(Color.RED);
                    }

//                    salesBillModel = new FuSalesBillModel();
                    salesBillModel.setClientid(clientModel.getId());
                    salesBillModel.setClientString(clientModel.getName());
                    salesBillModel.setArrears(clientModel.getArrears());
                    if (clientModel.getStaffName()!=null || !("").equals(clientModel.getStaffName())){
                        flag = false;
                        et_staffid.setText(clientModel.getStaffName());
                        salesBillModel.setStaffid(clientModel.getStaffid());
                        salesBillModel.setStaffString(clientModel.getStaffName());
                    }
                    discount.setText(bigDecimalUtil.getStringUtil(clientModel.getDiscount().toString()));
                    salesBillModel.setDiscount(clientModel.getDiscount());
                    mListView.setVisibility(View.GONE);
                }else if(baseModel.getResultCode().intValue() ==0){
                    DialogUtil.showDialog(getContext(), baseModel.getMessage(), false);
                }
            }
        });

        et_clientid.addTextChangedListener(new TextWatcher() {
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                testArray = new ArrayList<>();// 每次输入的时候，重新初始化数据列表
                if (!TextUtils.isEmpty(et_clientid.getText().toString())) {// 判断输入内容是否为空，为空则跳过
                    if (doClientForAc){
                        String input = et_clientid.getText().toString().trim();
                        testArray =getAC("clientListForAC", input, null);
                        clientid = null;
                        arrears.setText("");
                    }else {
                        doClientForAc = true;
                    }
                }
                clientAdapter.refreshData(testArray);// Adapter刷新数据
                mListView.setVisibility(View.VISIBLE);
            }
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });

        //店员AC
        staffAdapter = new MyAdapter(getActivity(), testArray);
        staffView.setAdapter(staffAdapter);// 设置Adapter，初始值为空

        staffView.setOnItemClickListener(new AdapterView.OnItemClickListener() {// listView点击事件
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                staffid = staffAdapter.getItem(position).getId();
                et_staffid.setText(staffAdapter.getItem(position).getName());
                salesBillModel.setStaffid(staffid);
                salesBillModel.setStaffString(et_staffid.getText().toString());
                staffView.setVisibility(View.GONE);
            }
        });

        et_staffid.addTextChangedListener(new TextWatcher() {
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                testArray = new ArrayList<>();// 每次输入的时候，重新初始化数据列表

                if (!TextUtils.isEmpty(et_staffid.getText().toString())) {// 判断输入内容是否为空，为空则跳过
                    if (flag) {
                        String input = et_staffid.getText().toString().trim();
                        testArray =getAC("staffListForAC", input, null);
                    } else {
                        flag = true;
                    }

                }
                staffAdapter.refreshData(testArray);// Adapter刷新数据
                staffView.setVisibility(View.VISIBLE);
            }
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void afterTextChanged(Editable s) {
            }
        });

        //款AC
        styleAdapter = new MyAdapter(getActivity(), testArray);
        styleView.setAdapter(styleAdapter);// 设置Adapter，初始值为空

        styleView.setOnItemClickListener(new AdapterView.OnItemClickListener() {// listView点击事件
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                styleid = styleAdapter.getItem(position).getId();
                styleView.setVisibility(View.GONE);
                FuStyleModel styleModel = getData(styleid);
                if(application.getFuAccountModel().getColorsizemode().intValue()==0){
                    Intent intent=new Intent(getActivity(), ColorSizeActivity.class);
                    Bundle bundle = new Bundle();
                    bundle.putSerializable("styleModel", styleModel);
                    intent.putExtra("priceTypeString", priceTypeString);
                    intent.putExtra("discount", discount.getText().toString());
                    intent.putExtras(bundle);
                    startActivityForResult(intent, REQUEST_CODE);
                    editText.setText("");
                    editText.setFocusable(true);
                }else if(application.getFuAccountModel().getColorsizemode().intValue()==1){
                    setSalesBillDetailList(styleModel);
                    appendDetailItemTable();
                    editText.setText("");
                }

            }
        });

        editText.addTextChangedListener(new TextWatcher() {
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                testArray = new ArrayList<>();// 每次输入的时候，重新初始化数据列表
                if (!TextUtils.isEmpty(editText.getText().toString())) {// 判断输入内容是否为空，为空则跳过
                    String input = editText.getText().toString().trim();
                    testArray =getAC("styleListForAC", input, 0);
                }
                styleAdapter.refreshData(testArray);// Adapter刷新数据
                styleView.setVisibility(View.VISIBLE);
            }
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });


    }

    public List<FuBaseModel> getAC(String methodid, String input, Integer justForName){

        BaseService baseService = new BaseService();
        result = baseService.doListForAC(webServerUrl, methodid, loginstaffid, logininvid, accessKey, accountid, input, justForName);
        Logcat.show(result);
        DataUtil dataUtil = new DataUtil();
        FuBaseModel baseModel = dataUtil.message(result);
        List<FuBaseModel> baseModelList = new ArrayList<>();
        if(baseModel.getResultCode().intValue() ==1){
            baseModelList = dataUtil.getDataListForAC(result);
        }else if(baseModel.getResultCode().intValue() ==0){
            DialogUtil.showDialog(getContext(), baseModel.getMessage(), false);
        }
        return baseModelList;
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.tv_addSalesBill:
                if (!TextUtils.isEmpty(remark.getText().toString())){
                    salesBillModel.setRemark(remark.getText().toString());
                }
                if (!TextUtils.isEmpty(discount.getText().toString())){
                    salesBillModel.setDiscount(new BigDecimal(discount.getText().toString()));
                }
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                try {
                    Date time = sdf.parse(occurencetime.getText().toString());
                    salesBillModel.setOccurrencetime(time);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                salesBillModel.setPricetypeid(priceTypeid);
                Intent intent = new Intent(getActivity(), PaymentActivity.class);
                Bundle bundle = new Bundle();
                bundle.putSerializable("salesBillModel", salesBillModel);
                intent.putExtra("salesBillDetailList", (Serializable) salesBillDetailList);
                intent.putExtras(bundle);
                startActivityForResult(intent, REQUEST_CODE);
                break;
            case R.id.addClient:
                Intent intentForClient=new Intent(getActivity(), AddClientActivity.class);
                Bundle bundleForClient = new Bundle();
                bundleForClient.putSerializable("priceTypeList", (Serializable) priceTypeList);
                intentForClient.putExtras(bundleForClient);
                startActivityForResult(intentForClient, REQUEST_CODE);
                break;
            default:
                break;
        }
    }

    public FuStyleModel getData(int styleid){
        StyleService styleService = new StyleService();
        String result = styleService.doSelectStyle(webServerUrl, loginstaffid, logininvid, accessKey, accountid, styleid);
        Logcat.show(result);
        DataUtil dataUtil = new DataUtil();
        FuBaseModel baseModel = dataUtil.message(result);
        FuStyleModel styleModel = new FuStyleModel();
        if(baseModel.getResultCode().intValue() ==1){
            styleModel = dataUtil.getStyleData(result);
        }else if(baseModel.getResultCode().intValue() ==0){
            DialogUtil.showDialog(getContext(), baseModel.getMessage(), false);
        }
        return styleModel;
    }

    List<FuSalesBillDetailModel> salesBillDetailList = new ArrayList<>();
    int itemId  =0;
    public View addRow(final FuSalesBillDetailModel fuSalesBillDetailModel){

        final FuSalesBillDetailModel salesBillDetailModel = new FuSalesBillDetailModel();
        //表格内容
        final LinearLayout linearLayout1 = new LinearLayout(getActivity());
        linearLayout1.setOrientation(LinearLayout.VERTICAL);
        linearLayout1.setPadding(0,20,0,0);
        LinearLayout layoutinfo = new LinearLayout(getActivity());
        layoutinfo.setOrientation(LinearLayout.HORIZONTAL);
        LinearLayout.LayoutParams layoutinfoParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        layoutinfoParams.gravity=Gravity.CENTER_HORIZONTAL|Gravity.CENTER_VERTICAL;
        layoutinfo.setLayoutParams(layoutinfoParams);
        ImageView imageView = new ImageView(getActivity());
        LinearLayout.LayoutParams imageParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        imageParams.gravity=Gravity.LEFT;
        imageParams.setMargins(20,0,10,0);
        imageView.setLayoutParams(imageParams);
        imageView.setBackground(getResources().getDrawable(R.drawable.logo));

        LinearLayout layoutinfo1 = new LinearLayout(getActivity());
        layoutinfo1.setOrientation(LinearLayout.VERTICAL);
        LinearLayout.LayoutParams layoutinfo1Params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        layoutinfo1Params.gravity=Gravity.RIGHT;
        layoutinfo1Params.setMargins(20,0,10,0);
        layoutinfo1.setLayoutParams(layoutinfo1Params);

        LinearLayout layoutinfo2 = new LinearLayout(getActivity());
        layoutinfo2.setOrientation(LinearLayout.HORIZONTAL);
        layoutinfo2.setPadding(0,5,0,5);

        TextView styleCode = new TextView(getActivity());
        styleCode.setText(fuSalesBillDetailModel.getStyleCode());
        styleCode.setTextColor(Color.BLACK);
        styleCode.setPadding(0,0,10,0);
        TextView styleString = new TextView(getActivity());
        styleString.setWidth(w_screen/3);
        styleString.setText(fuSalesBillDetailModel.getStyleString());
        styleString.setTextColor(Color.BLACK);
        styleString.setPadding(0,0,40,0);
        styleString.setSingleLine(true);
        styleString.setEllipsize(TextUtils.TruncateAt.END);
        final EditText remarkDetail = new EditText(getActivity());
        remarkDetail.setWidth(w_screen/4-50);
        remarkDetail.setHint("备注");
        remarkDetail.setSingleLine(true);
        remarkDetail.setSelection(0);
        remarkDetail.setText(fuSalesBillDetailModel.getRemark());
        remarkDetail.setTextColor(Color.BLACK);
        remarkDetail.setPadding(10, 5, 10, 5);
        remarkDetail.setBackground(getResources().getDrawable(R.drawable.bg_edittext));
        layoutinfo2.addView(styleCode);
        layoutinfo2.addView(styleString);
        layoutinfo2.addView(remarkDetail);

        LinearLayout layoutinfo3 = new LinearLayout(getActivity());
        layoutinfo2.setOrientation(LinearLayout.HORIZONTAL);
        TextView colorString = new TextView(getActivity());
        colorString.setWidth(w_screen/8);
        colorString.setText(fuSalesBillDetailModel.getColorString());
        colorString.setTextColor(Color.BLACK);
        colorString.setSingleLine(true);
        colorString.setEllipsize(TextUtils.TruncateAt.END);
        TextView sizeString = new TextView(getActivity());
        sizeString.setWidth(w_screen/8);
        sizeString.setText(fuSalesBillDetailModel.getSizeString());
        sizeString.setTextColor(Color.BLACK);
        sizeString.setSingleLine(true);
        sizeString.setEllipsize(TextUtils.TruncateAt.END);
        final EditText amountDetail = new EditText(getActivity());
        amountDetail.setTextSize(TypedValue.COMPLEX_UNIT_PX, 40);
        amountDetail.setWidth(w_screen/7);
        amountDetail.setPadding(20, 10, 10, 10);
        if (fuSalesBillDetailModel.getAmount() != null){
            amountDetail.setText(String.valueOf(fuSalesBillDetailModel.getAmount()));
        }
        amountDetail.setTextColor(Color.BLACK);
        amountDetail.setBackground(getResources().getDrawable(R.drawable.bg_edittext));
        amountDetail.setSingleLine(true);
        amountDetail.setInputType(InputType.TYPE_CLASS_NUMBER|InputType.TYPE_NUMBER_FLAG_SIGNED);
        if (application.getFuAccountModel().getColorsizemode().intValue()==1){
            amountDetail.setFocusable(true);
            amountDetail.requestFocus();
            amountDetail.setFocusableInTouchMode(true);
        }

        final EditText priceDetail = new EditText(getActivity());
        priceDetail.setText(bigDecimalUtil.getStringUtil(fuSalesBillDetailModel.getPrice().toString()));
        priceDetail.setTextSize(TypedValue.COMPLEX_UNIT_PX, 40);
        priceDetail.setWidth(w_screen/7);
        priceDetail.setPadding(20, 10, 10, 10);
        priceDetail.setTextColor(Color.BLACK);
        priceDetail.setBackground(getResources().getDrawable(R.drawable.bg_edittext));
        priceDetail.setSingleLine(true);
        priceDetail.setInputType(InputType.TYPE_CLASS_PHONE);

        final EditText discountDetail = new EditText(getActivity());
        discountDetail.setText(discount.getText().toString());
        discountDetail.setTextSize(TypedValue.COMPLEX_UNIT_PX, 40);
        discountDetail.setWidth(w_screen/7);
        discountDetail.setPadding(20, 10, 10, 10);
        discountDetail.setTextColor(Color.BLACK);
        discountDetail.setBackground(getResources().getDrawable(R.drawable.bg_edittext));
        discountDetail.setSingleLine(true);
        discountDetail.setInputType(InputType.TYPE_CLASS_PHONE);

        final TextView totalDetail = new TextView(getActivity());
        LinearLayout.LayoutParams totalParams = new LinearLayout.LayoutParams(w_screen/8, ViewGroup.LayoutParams.WRAP_CONTENT);
        totalParams.gravity=Gravity.CENTER_HORIZONTAL|Gravity.CENTER_VERTICAL;
        totalParams.setMargins(20,0,10,0);
        totalDetail.setLayoutParams(totalParams);
        totalDetail.setWidth(w_screen/7);
        totalDetail.setText(bigDecimalUtil.getStringUtil(fuSalesBillDetailModel.getTotal().toString()));
        totalDetail.setTextSize(TypedValue.COMPLEX_UNIT_PX, 50);
        totalDetail.setTextColor(Color.BLACK);
        totalDetail.setSingleLine(true);
        totalDetail.setEllipsize(TextUtils.TruncateAt.END);

        TextView delete = new TextView(getActivity());
        delete.setWidth(w_screen/8);
        delete.setHeight(130);
        delete.setBackgroundColor(Color.RED);
        delete.setText("删除");
        delete.setTextColor(Color.WHITE);
        delete.setGravity(Gravity.CENTER);
        delete.setTag(itemId);

        layoutinfo3.addView(colorString);
        layoutinfo3.addView(sizeString);
        layoutinfo3.addView(amountDetail);
        layoutinfo3.addView(priceDetail);
        layoutinfo3.addView(discountDetail);
        layoutinfo3.addView(totalDetail);

        layoutinfo1.addView(layoutinfo2);
        layoutinfo1.addView(layoutinfo3);
        layoutinfo.addView(imageView);
        layoutinfo.addView(layoutinfo1);

        layoutinfo.addView(delete);
        layoutinfo.setTag(delete.getTag());

        linearLayout1.addView(layoutinfo);
        linearLayout1.setTag(layoutinfo.getTag());

        salesBillDetailModel.setPrice(fuSalesBillDetailModel.getPrice());
        salesBillDetailModel.setAmount(fuSalesBillDetailModel.getAmount());
        salesBillDetailModel.setTotal(fuSalesBillDetailModel.getTotal());
        priceDetail.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
                if (!("").equals(priceDetail.getText().toString())  && !("").equals(amountDetail.getText().toString()) && !("").equals(discountDetail.getText().toString())) {
                    totalDetail.setText(String.valueOf(new BigDecimal(amountDetail.getText().toString()).multiply(new BigDecimal(priceDetail.getText().toString())).multiply(new BigDecimal(discountDetail.getText().toString()))));
                    salesBillDetailModel.setTotal(new BigDecimal(amountDetail.getText().toString()).multiply(new BigDecimal(priceDetail.getText().toString())).multiply(new BigDecimal(discountDetail.getText().toString())));
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = salesBillDetailList;
                    mhandler.sendMessage(msg);
                } else {
                    totalDetail.setText("");
                    salesBillDetailModel.setTotal(new BigDecimal(0));
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = salesBillDetailList;
                    mhandler.sendMessage(msg);
                }

                if (!("").equals(priceDetail.getText().toString())) {
                    salesBillDetailModel.setPrice(BigDecimal.valueOf(Integer.parseInt(priceDetail.getText().toString() + "")));
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = salesBillDetailList;
                    mhandler.sendMessage(msg);

                } else {
                    salesBillDetailModel.setPrice(new BigDecimal(0));
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = salesBillDetailList;
                    mhandler.sendMessage(msg);
                }

            }

            @Override
            public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
            }

            @Override
            public void afterTextChanged(Editable arg0) {
            }

        });

        discountDetail.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
                if (!("").equals(priceDetail.getText().toString())  && !("").equals(amountDetail.getText().toString()) && !("").equals(discountDetail.getText().toString())) {
                    totalDetail.setText(String.valueOf(new BigDecimal(amountDetail.getText().toString()).multiply(new BigDecimal(priceDetail.getText().toString())).multiply(new BigDecimal(discountDetail.getText().toString()))));
                    salesBillDetailModel.setTotal(new BigDecimal(amountDetail.getText().toString()).multiply(new BigDecimal(priceDetail.getText().toString())).multiply(new BigDecimal(discountDetail.getText().toString())));
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = salesBillDetailList;
                    mhandler.sendMessage(msg);
                } else {
                    totalDetail.setText("");
                    salesBillDetailModel.setTotal(new BigDecimal(0));
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = salesBillDetailList;
                    mhandler.sendMessage(msg);
                }

                if (!("").equals(discountDetail.getText().toString())) {
                    salesBillDetailModel.setDiscount(new BigDecimal(discountDetail.getText().toString()));
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = salesBillDetailList;
                    mhandler.sendMessage(msg);

                } else {
                    salesBillDetailModel.setPrice(new BigDecimal(0));
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = salesBillDetailList;
                    mhandler.sendMessage(msg);
                }

            }

            @Override
            public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
            }

            @Override
            public void afterTextChanged(Editable arg0) {
            }

        });

        amountDetail.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
                if (!("").equals(priceDetail.getText().toString()) && !("").equals(amountDetail.getText().toString()) && !("").equals(discountDetail.getText().toString())) {
                    if (amountDetail.getText().toString().indexOf("-") != -1 && amountDetail.getText().length()==1){
                        Log.d("sfn", amountDetail.getText().toString());
                    }else {
                        totalDetail.setText(String.valueOf(new BigDecimal(priceDetail.getText().toString()).multiply(new BigDecimal(Integer.parseInt(amountDetail.getText().toString().trim()))).multiply(new BigDecimal(discountDetail.getText().toString()))));
                        salesBillDetailModel.setTotal(new BigDecimal(priceDetail.getText().toString()).multiply(new BigDecimal(Integer.parseInt(amountDetail.getText().toString().trim()))).multiply(new BigDecimal(discountDetail.getText().toString())));
                        Message msg = new Message();
                        msg.what = 1;
                        msg.obj = salesBillDetailList;
                        mhandler.sendMessage(msg);
                    }

                } else {
                    totalDetail.setText("");
                    salesBillDetailModel.setTotal(new BigDecimal(0));
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = salesBillDetailList;
                    mhandler.sendMessage(msg);
                }

                if (!("").equals(amountDetail.getText().toString())) {
                    if (amountDetail.getText().toString().indexOf("-") != -1 && amountDetail.getText().length()==1){
                        Log.d("sfn", amountDetail.getText().toString());
                    }else {
                        salesBillDetailModel.setAmount(Integer.valueOf(amountDetail.getText().toString()));
                        Message msg = new Message();
                        msg.what = 1;
                        msg.obj = salesBillDetailList;
                        mhandler.sendMessage(msg);
                    }

                } else {
                    salesBillDetailModel.setAmount(0);
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = salesBillDetailList;
                    mhandler.sendMessage(msg);
                }
            }

            @Override
            public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
            }

            @Override
            public void afterTextChanged(Editable arg0) {
            }
        });

        salesBillDetailModel.setRemark(fuSalesBillDetailModel.getRemark());
        remarkDetail.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                if (!("").equals(remarkDetail.getText().toString())){
                    salesBillDetailModel.setRemark(charSequence.toString());
                }
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        });

        delete.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View view){

                LinearLayout linearLayout = (LinearLayout) view.getParent();
                LinearLayout linearLayout2 = (LinearLayout) linearLayout.getParent();
                TableRow tableRow = (TableRow) linearLayout2.getParent().getParent();
                HorizontalScrollView hsview = (HorizontalScrollView) tableRow.getParent();
                int Id = (int)hsview.getTag();
                tableLayout.removeView(hsview);

                Log.d("sfn", Id+"");
                salesBillDetailList.remove(Id);
                int childrenCount = tableLayout.getChildCount();
                for(int i = 0 ;i<childrenCount;i++)
                {
                   try{
                       int seq =(int)tableLayout.getChildAt(i).getTag();
                       if( seq >Id)
                       {
                           tableLayout.getChildAt(i).setTag(seq-1);
                       }
                   }
                   catch (Exception e)
                   {


                   }
                }
                itemId--;
                Message msg = new Message();
                msg.what = 1;
                msg.obj = salesBillDetailList;
                mhandler.sendMessage(msg);
            }
        });

        salesBillDetailModel.setStyleid(fuSalesBillDetailModel.getStyleid());
        salesBillDetailModel.setStyleCode(fuSalesBillDetailModel.getStyleCode());
        salesBillDetailModel.setStyleString(fuSalesBillDetailModel.getStyleString());
        salesBillDetailModel.setColorid(fuSalesBillDetailModel.getColorid());
        salesBillDetailModel.setColorString(fuSalesBillDetailModel.getColorString());
        salesBillDetailModel.setSizeid(fuSalesBillDetailModel.getSizeid());
        salesBillDetailModel.setSizeString(fuSalesBillDetailModel.getSizeString());
        salesBillDetailModel.setDiscount(new BigDecimal(1));


        salesBillDetailList.add(salesBillDetailModel);
        itemId++;
        return linearLayout1;
    }

    private void getfoottable() {

        mhandler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                if (msg.what == 1) {
                    if (salesBillModel == null){
                        salesBillModel = new FuSalesBillModel();
                    }
                    numberber = 0;
                    totlele = new BigDecimal(0);
                    salesAmount = 0;
                    cancelAmount = 0;
                    templist = (List<FuSalesBillDetailModel>) msg.obj;
                    sum_id.setText("总计 " + templist.size());
                    for (int i = 0; i < templist.size(); i++) {
                        if (templist.get(i).getAmount() != null){
                            numberber = numberber + templist.get(i).getAmount();
                            totlele = totlele.add(templist.get(i).getTotal());
                            if (templist.get(i).getAmount().intValue()>0){
                                salesAmount = salesAmount + templist.get(i).getAmount();
                            }
                            if (templist.get(i).getAmount().intValue()<0){
                                cancelAmount = cancelAmount + templist.get(i).getAmount();
                            }
                        }
                    }

                    sum_num.setText(numberber + "");
                    sum_money.setText(bigDecimalUtil.getStringUtil(totlele+""));
                    sumamountdetail.setText("("+salesAmount+","+cancelAmount+")");
                    salesBillModel.setTotal(totlele);
                }
            }
        };

    }


    public static class ViewTabLay{
        public View view;
        public TableLayout tablay;

        public ViewTabLay(View view) {
            this.view = view;
            this.tablay = view.findViewById(R.id.tablay);
        }
    }

    public void setSalesBillDetailList(FuStyleModel fuStyleModel){

        fuSalesBillDetailModelList = new ArrayList<>();
        FuSalesBillDetailModel fuSalesBillDetailModel = new FuSalesBillDetailModel();
        fuSalesBillDetailModel.setStyleid(fuStyleModel.getId());
        fuSalesBillDetailModel.setStyleCode(fuStyleModel.getCode());
        fuSalesBillDetailModel.setStyleString(fuStyleModel.getName());
        fuSalesBillDetailModel.setColorid(fuStyleModel.getColorid());
        fuSalesBillDetailModel.setColorString(fuStyleModel.getColorString());
        fuSalesBillDetailModel.setSizeid(fuStyleModel.getSizeid());
        fuSalesBillDetailModel.setSizeString(fuStyleModel.getSizeString());
        fuSalesBillDetailModel.setPrice(new BigDecimal(0));
        for (FuStylePriceTypeModel fuStylePriceTypeModel : fuStyleModel.getFuStylePriceTypeModelList()){
            if (fuStylePriceTypeModel.getPricetypeString().equals(priceTypeString)){
                fuSalesBillDetailModel.setPrice(fuStylePriceTypeModel.getPrice());
            }
        }
        fuSalesBillDetailModel.setTotal(new BigDecimal(0));
        fuSalesBillDetailModel.setRemark("");

        fuSalesBillDetailModelList.add(fuSalesBillDetailModel);

    }

    public void setNull(){
        et_clientid.setText("");
        arrears.setText("");
        et_staffid.setText("");
        discount.setText("1");
        remark.setText("");
        salesBillModel = new FuSalesBillModel();
        salesBillDetailList.clear();
        salesBillDetailList = new ArrayList<>();
        fuSalesBillDetailModelList.clear();
        fuSalesBillDetailModelList = new ArrayList<>();
        ViewTabLay viewTabLay = new ViewTabLay(view);
        tableLayout = viewTabLay.tablay;
        View view1;
        for(int index = tableLayout.getChildCount(); index >0 ; index--){
            view1 = tableLayout.getChildAt(index);
            if(view1 != null && view1 instanceof TableLayout){
            } else {
                tableLayout.removeAllViews();
            }
        }
        sum_id.setText("总计 0");
        sumamountdetail.setText("(0,0)");
        sum_num.setText("0");
        sum_money.setText("0");
    }
}
