package com.smyhvae.util;

import android.util.Log;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;


public class HttpUtil {
    public static HttpClient httpClient = new DefaultHttpClient();
    public static final String BASE_URL = "http://"+ "192.168.31.220:8080" +"/future/app/entry.htm?query=";
    public static HttpPost post;
    /**
     *
     * @param url
     *            发送请求的URL
     * @return 服务器响应字符串
     * @throws Exception
     */
    public static String getRequest(final String url) throws Exception {
        FutureTask<String> task = new FutureTask<String>(new Callable<String>() {
            @Override
            public String call() throws Exception {
                // 创建HttpGet对象。
                HttpGet get = new HttpGet(url);
                // 发送GET请求
                HttpResponse httpResponse = httpClient.execute(get);
                // 如果服务器成功地返回响应
                if (httpResponse.getStatusLine().getStatusCode() == 200) {
                    // 获取服务器响应字符串
                    String result = EntityUtils.toString(httpResponse.getEntity());
                    return result;
                } else {
                    Log.d("============", (new Integer(httpResponse.getStatusLine()
                            .getStatusCode())).toString());
                    return null;
                }
            }
        });
        new Thread(task).start();
        return task.get();


    }

    /**
     *
     * @param url
     *            发送请求的URL
     *            请求参数
     * @return 服务器响应字符串
     * @throws Exception
     */
    public static synchronized String postRequest(final String url, final Map<String, String> rawParams)
            throws Exception {
        FutureTask<String> task = new FutureTask<String>(new Callable<String>() {
            @Override
            public String call() throws Exception {
                String result = null;
                // 创建HttpPost对象。
                post = new HttpPost(url);
                // 如果传递参数个数比较多的话可以对传递的参数进行封装
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                for (String key : rawParams.keySet()) {
                    // 封装请求参数
                    params.add(new BasicNameValuePair(key, rawParams.get(key)));
                }
                // 设置请求参数
                post.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
                // 发送POST请求
                HttpResponse httpResponse = httpClient.execute(post);
                // 如果服务器成功地返回响应
                if (httpResponse.getStatusLine().getStatusCode() == 200) {
                    // 获取服务器响应字符串
                    result = EntityUtils.toString(httpResponse.getEntity());
                    return result;
                }else if(httpResponse.getStatusLine().getStatusCode() == 503){
                    Log.d("HttpPost", "服务不可用");
                }else if(httpResponse.getStatusLine().getStatusCode() == 404){
                    Log.d("HttpPost", "请求的网页不存在");
                }else {
                    Log.d("HttpPost", "HttpPost方式请求失败");
                }
                return result;
            }
        });
        new Thread(task).start();
        return task.get();

    }

}
