package com.smyhvae.util;


import android.util.Log;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrintBillUtil {
    BigDecimalUtil bigDecimalUtil = new BigDecimalUtil();
    private OutputStream OutStream = null;
    private InputStream InStream = null;
    private Socket socket = null;
    private byte[] readBuf = new byte[1024];
    private String printerstatus = "";

    public PrintBillUtil(Socket socket, OutputStream OutStream, InputStream InStream){
        super();
        this.socket = socket;
        this.OutStream = OutStream;
        this.InStream = InStream;
    }

    public void prePrint(String printResult){
        this.clearbuffer();
        this.setup(110, 0, 5, 7, 0, 0, 0);
        this.sendcommand("OFFSET 0.5\n");
        this.sendcommand("BACKFEED 40\n");
        this.clearbuffer();
        int y = doPrint(printResult);

        this.clearbuffer();
        this.setup(110, y/8, 5, 7, 0, 0, 0);
        this.sendcommand("OFFSET 0.5\n");
        this.sendcommand("BACKFEED 40\n");
        this.clearbuffer();
        this.doPrint(printResult);

        this.printlabel(1, 1);
        this.clearbuffer();
        this.closeport();
    }

    public int doPrint(String printResult) {
        Log.d("sfn", printResult);
        Map<String, Object> map = JsonToMap.toMap(printResult);

        JSONUtility jsonUtility = new JSONUtility();
        String prefix = "";
        if (("1").equals(jsonUtility.getStringValueFromJSON(map, "isSalesOrderBill"))) {
            prefix = "(订)";
        }
        String header = prefix + jsonUtility.getStringValueFromJSON(map, "header");

        String codeTitle = "单号: ";
        String code = jsonUtility.getStringValueFromJSON(map, "code");

        String dateTitle = "日期: ";
        String date = jsonUtility.getStringValueFromJSON(map, "occurrenceTime");

        String invTitle = "门店: ";
        String inv = jsonUtility.getStringValueFromJSON(map, "invString");

        String addressTitle = "地址: ";
        String address = jsonUtility.getStringValueFromJSON(map, "invAddress");
        address = address == null ? " " : address;

        String phoneTitle = "电话: ";
        String phone = jsonUtility.getStringValueFromJSON(map, "invTel");
        phone = phone == null ? " " : phone;

        String cellphoneTitle = "手机: ";
        String cellphone = jsonUtility.getStringValueFromJSON(map, "cellphone");
        cellphone = cellphone == null ? " " : cellphone;

        String alipay = jsonUtility.getStringValueFromJSON(map, "alipay");
        alipay = alipay == null ? " " : alipay;

        String accountnameTitle = "微信: ";
        String accountname = jsonUtility.getStringValueFromJSON(map, "accountname");
        accountname = accountname == null ? " " : accountname;

        String clientTitle = "客户: ";
        String client = jsonUtility.getStringValueFromJSON(map, "clientString");
        client = client == null ? " " : client;

        String staffTitle = "店员: ";
        String staff = jsonUtility.getStringValueFromJSON(map, "staffString");
        staff = staff == null ? " " : staff;

        String realalipay = jsonUtility.getStringValueFromJSON(map, "realalipay");
        String realalipaystring = jsonUtility.getStringValueFromJSON(map, "realalipaystring");

        String wechatpay = jsonUtility.getStringValueFromJSON(map, "wechatpay");
        String wechatpaystring = jsonUtility.getStringValueFromJSON(map, "wechatpaystring");
        String qrcodewx = jsonUtility.getStringValueFromJSON(map, "qrcodewx");

        String remarkSum = jsonUtility.getStringValueFromJSON(map, "remarkSum");

        List<Map<String, Object>> bankAccountListTemp = jsonUtility.getListValueFromJSON(map, "bankAccountList");
        List<Map<String, Object>> bankAccountList = new ArrayList<Map<String, Object>>();
        for (Map<String, Object> one : bankAccountListTemp) {
            String name = jsonUtility.getStringValueFromJSON(one, "name");
            if (!("").equals(name)) {
                bankAccountList.add(one);
            }
        }

        String appVersionTitle = "启豹店铺管理软件HD版 v";
        String appVersion = jsonUtility.getStringValueFromJSON(map, "appversion");

        String printDateTitle = "打印时间: ";
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date printDate = new Date();
        String printDateString = sdf.format(printDate);

        Map<String, String> sumMap = new HashMap<>();
        sumMap.put("amount", jsonUtility.getStringValueFromJSON(map, "amountSum"));
        sumMap.put("total", jsonUtility.getStringValueFromJSON(map, "totalSum"));
        sumMap.put("remarkSum", jsonUtility.getStringValueFromJSON(map, "remarkSum") == null ? " " : jsonUtility.getStringValueFromJSON(map, "remarkSum"));

        List<Map<String, Object>> detailList = jsonUtility.getListValueFromJSON(map, "details");
        if (detailList == null) {
            detailList = new ArrayList<>();
        }

        int x = 0;
        int y = 0;
        this.printerfont(x+250, y+20, "TSS24.BF2", 0, 3, 3, header);

        y = y + 100;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, dateTitle+date);
        x = x + 320;
        this.printerfont(x, y , "TSS24.BF2", 0, 1, 1, codeTitle+code);

        x = 0;
        y = y + 30;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, invTitle+inv);
        x = x + 320;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, staffTitle+staff);

        x = 0;
        y = y + 30;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 2, clientTitle + client);

        y = y + 70;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, "序");
        x = x + 40;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, "款号");
        x = x + 250;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, "名称");
        x = x + 200;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, "数量");
        x = x + 100;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, "单价");
        x = x + 100;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, "小计");

        x = 0;
        y = y + 30;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, "------------------------------------------------------------------------------");

        for (int i = 0; i < detailList.size(); i++){
            Map<String, Object> detail = detailList.get(i);
            x = 0;
            y = y + 30;
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, i+1+"");
            String styleCode = jsonUtility.getStringValueFromJSON(detail, "code");
            x = x + 40;
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, styleCode);
            String name = jsonUtility .getStringValueFromJSON(detail, "name");
            x = x + 250;
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, name);
            String amount = jsonUtility.getStringValueFromJSON(detail, "amount");
            x = x + 200;
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, amount);
            String price = jsonUtility.getStringValueFromJSON(detail, "price");
            x = x + 100;
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, bigDecimalUtil.getStringUtil(price));
            String total = jsonUtility.getStringValueFromJSON(detail, "total");
            x = x + 100;
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, bigDecimalUtil.getStringUtil(total));
        }

        x = 0;
        y = y + 30;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, "------------------------------------------------------------------------------");

        y = y + 30;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 2, "合计");
        String amountSum = jsonUtility.getStringValueFromJSON(map, "amountSum");
        String totalSum = jsonUtility.getStringValueFromJSON(map, "totalSum");
        x = x + 500;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 2, amountSum);
        x = x + 200;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 2, bigDecimalUtil.getStringUtil(totalSum));

        x = 0;
        y = y + 50;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, "备注："+remarkSum);

        if (!("1").equals(jsonUtility.getStringValueFromJSON(map, "isSalesOrderBill"))) {
            String combineString = "";
            int salesTotalAmount = 0;
            double salesTotalMoney = 0.0f;
            int backTotalAmount = 0;
            double backTotalMoney = 0.0f;
            for (Map<String, Object> detail : detailList) {
                if (jsonUtility.getIntegerValueFromJSON(detail,
                        "stylecolorsizeid") != null) {
                    int detailAmount = jsonUtility.getIntegerValueFromJSON(
                            detail, "amount");
                    double detailTotal = jsonUtility
                            .getBigDecimalValueFromJSON(detail, "total")
                            .doubleValue();
                    if (detailAmount >= 0) {
                        salesTotalAmount += detailAmount;
                    } else {
                        backTotalAmount += detailAmount * (1);
                    }
                    if (detailTotal >= 0) {
                        salesTotalMoney += detailTotal;
                    } else {
                        backTotalMoney += detailTotal * (1);
                    }
                }
            }
            if (salesTotalAmount > 0) {
                combineString += "销售 " + salesTotalAmount + "  ";
            }
            if (salesTotalMoney > 0) {
                combineString += "销售额 " + String.format("%.2f", salesTotalMoney) + "  ";
            }
            if (backTotalAmount < 0) {
                combineString += "退货 " + backTotalAmount + "  ";
            }
            if (backTotalMoney < 0) {
                combineString += "退货额 " + String.format("%.2f", backTotalMoney) + "  ";
            }

            String otherString = "";
            int realPay = 0;
            List<Map<String, Object>> cutMoneyList = jsonUtility.getListValueFromJSON(map, "cutMoneyList") == null ? (new ArrayList<Map<String, Object>>())
                    : jsonUtility.getListValueFromJSON(map, "cutMoneyList");
            for (Map<String, Object> one : cutMoneyList) {
                otherString += jsonUtility.getStringValueFromJSON(one, "name") + " " + jsonUtility.getStringValueFromJSON(one, "money") + "  ";
            }

            x = 0;
            y = y + 30;
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 2, combineString);
            if (cutMoneyList.size() > 0) {
                y = y + 50;
                this.printerfont(x, y, "TSS24.BF2", 0, 1, 2, otherString);
            }


            String tempForPayway = "";
            List<Map<String, Object>> moneyList = jsonUtility .getListValueFromJSON(map, "moneyList") == null ? (new ArrayList<Map<String, Object>>())
                    : jsonUtility.getListValueFromJSON(map, "moneyList");
            for (Map<String, Object> one : moneyList) {
                Integer paymentid = jsonUtility.getIntegerValueFromJSON(one, "paymentid");
                if (paymentid.intValue() == 1) {
                    tempForPayway += jsonUtility.getStringValueFromJSON(one, "name")
                            + " " + jsonUtility.getStringValueFromJSON(one, "money") + "  ";
                } else {
                    tempForPayway += jsonUtility.getStringValueFromJSON(one, "name")
                            + " " + jsonUtility.getStringValueFromJSON(one, "moneyaccountString")
                            + " " + jsonUtility.getStringValueFromJSON(one, "money") + "  ";
                }
                realPay += jsonUtility.getBigDecimalValueFromJSON(one, "money").intValue();
            }
            int realTotalSum = jsonUtility.getBigDecimalValueFromJSON(map, "totalSum").intValue();
            String payString = "本单: " + realTotalSum;
            if (jsonUtility.getIntegerValueFromJSON(map, "type").intValue() == 1) {
                tempForPayway += "代收" + " " + (realTotalSum - realPay);
            } else {
                if (moneyList == null || moneyList.size() <= 0) {
                    if (realTotalSum == 0) {

                    } else if (realTotalSum > 0) {
                        tempForPayway += "本次欠款";
                    } else if (realTotalSum < 0) {
                        tempForPayway += "本次余额";
                    }
                }
            }
            y = y + 50;
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 2, (payString+"      "+tempForPayway));

            String arearsString = "";
            int lastArrears = jsonUtility.getStringValueFromJSON(map,
                    "arrears") == null || ("").equals(jsonUtility.getStringValueFromJSON(
                    map, "arrears")) ? 0 : jsonUtility.getIntegerValueFromJSON(map, "arrears").intValue();
            int currentArrears = realTotalSum - realPay;
            if (jsonUtility.getIntegerValueFromJSON(map, "type").intValue() == 1) {
                currentArrears = 0;
            }
            int totalArrears = lastArrears + currentArrears;
            arearsString += "上次累计" + (lastArrears < 0 ? "余额" : "欠款") + " "
                    + Math.abs(lastArrears) + "  " + "本次"
                    + (currentArrears < 0 ? "余额" : "欠款") + " "
                    + Math.abs(currentArrears) + "  " + "共累计"
                    + (totalArrears < 0 ? "余额" : "欠款") + " " + Math.abs(totalArrears);
            if (lastArrears != 0 || currentArrears != 0 || totalArrears != 0) {
                y = y + 50;
                this.printerfont(x, y, "TSS24.BF2", 0, 1, 2, arearsString);
            }
        }

        List<String> bankAccountLines = new ArrayList<>();
        for (int i = 0; i < bankAccountList.size() - 1; i += 2) {
            Map<String, Object> first = bankAccountList.get(i);
            Map<String, Object> second = bankAccountList.get(i + 1);

            String title1 = "汇款信息: ";
            String cardName1 = jsonUtility.getStringValueFromJSON(
                    first, "cardname");
            String name1 = jsonUtility.getStringValueFromJSON(first,
                    "name");
            String cardName2 = jsonUtility.getStringValueFromJSON(
                    second, "cardname");
            String name2 = jsonUtility.getStringValueFromJSON(second,
                    "name");
            String line = title1 + cardName1 + " " + name1;
            line += title1 + cardName2 + " " + name2;
            bankAccountLines.add(line);
        }

        Map<String, Object> last = bankAccountList.get(bankAccountList.size() - 1);
        String titleLast = "汇款信息: ";
        String cardNameLast = jsonUtility.getStringValueFromJSON(last, "cardname");
        String nameLast = jsonUtility.getStringValueFromJSON(last, "name");
        String lineLast = titleLast + cardNameLast + " " + nameLast;
        bankAccountLines.add(lineLast);
        y = y + 60;
        for (String line : bankAccountLines) {
            x = 0;
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, line);
            y = y + 30;
        }

        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, addressTitle+address);
        y = y + 30;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, phoneTitle+phone);
        x = x + 200;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, accountnameTitle+accountname);
        x = 0;
        y = y + 30;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, cellphoneTitle+cellphone);
        y = y + 30;
        if (alipay.length() <= 35) {
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, alipay);
        } else {
            String tmpString = alipay.substring(0,34);
            String tmpString2 = alipay.substring(34, alipay.length());
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, tmpString);
            y = y + 30;
            this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, tmpString2);
        }

        y = y + 30;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, "扫一扫，加微信");
        x = x + 300;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, realalipaystring);
        x = x + 300;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, wechatpaystring);

        y = y + 30;
        x = 0;
        this.qrcode(x, y, qrcodewx);
        x = x + 300;
        this.qrcode(x, y, realalipay);
        x = x + 300;
        this.qrcode(x, y, wechatpay);

        x = 0;
        y = y + 200;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, appVersionTitle+appVersion);
        x = x + 350;
        this.printerfont(x, y, "TSS24.BF2", 0, 1, 1, printDateTitle + printDateString);

        y = y + 50;
        return y;
    }

    public void printerfont(int x, int y, String size, int rotation, int x_multiplication, int y_multiplication, String string) {
        String message = "";
        try {
            message = "TEXT " + x + "," + y + ",\"" + size + "\"" + "," + rotation + " ," + x_multiplication + " ," + y_multiplication + ",\"" + string + "\"\n";
            this.sendcommand((message.getBytes("gb2312")));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    public void qrcode(int x, int y, String string) {
        String message = "";
        message = "QRCODE "+x+","+y+",H,4,A,0,\""+string+"\"\n";

        byte[] msgBuffer = message.getBytes();
        try {
            this.OutStream.write(msgBuffer);
        } catch (IOException var22) {
            var22.printStackTrace();
        }

    }

    public void sendcommand(String message) {
        byte[] msgBuffer = message.getBytes();
        try {
            this.OutStream.write(msgBuffer);
        } catch (IOException var4) {
            var4.printStackTrace();
        }
    }

    public void sendcommand(byte[] message) {
        try {
            this.OutStream.write(message);
        } catch (IOException var3) {
            var3.printStackTrace();
        }
    }

    public void clearbuffer() {
        String message = "CLS\n";
        byte[] msgBuffer = message.getBytes();
        try {
            this.OutStream.write(msgBuffer);
        } catch (IOException var4) {
            var4.printStackTrace();
        }
    }

    public void setup(int width, int height, int speed, int density, int sensor, int sensor_distance, int sensor_offset) {
        String message = "";
        String size = "SIZE " + width + " mm" + ", " + height + " mm";
        String speed_value = "SPEED " + speed;
        String density_value = "DENSITY " + density;
        String sensor_value = "";
        if (sensor == 0) {
            sensor_value = "GAP " + sensor_distance + " mm" + ", " + sensor_offset + " mm";
        } else if (sensor == 1) {
            sensor_value = "BLINE " + sensor_distance + " mm" + ", " + sensor_offset + " mm";
        }

        message = size + "\n" + speed_value + "\n" + density_value + "\n" + sensor_value + "\n";
        byte[] msgBuffer = message.getBytes();

        try {
            this.OutStream.write(msgBuffer);
        } catch (IOException var15) {
            var15.printStackTrace();
        }
    }

    public void printlabel(int quantity, int copy) {
        String message = "";
        message = "PRINT " + quantity + ", " + copy + "\n";
        byte[] msgBuffer = message.getBytes();

        try {
            this.OutStream.write(msgBuffer);
        } catch (IOException var6) {
            var6.printStackTrace();
        }
    }

    public void closeport() {
        try {
            this.OutStream.flush();
            this.socket.close();
        } catch (IOException var2) {
            var2.printStackTrace();
        }
    }

    public String status() {
        byte[] message = new byte[]{(byte) 27, (byte) 33, (byte) 63};
        try {
            this.OutStream.write(message);
        } catch (IOException var4) {
            Log.e("THINBTCLIENT", "ON RESUME: Exception during write.", var4);
        }

        try {
            Thread.sleep(1000L);
        } catch (InterruptedException var3) {
            var3.printStackTrace();
        }

        int tim;
        try {
            while (this.InStream.available() > 0) {
                this.readBuf = new byte[1024];
                tim = this.InStream.read(this.readBuf);
                Log.e("","tim is "+tim);
            }
        } catch (IOException var5) {
            var5.printStackTrace();
        }

        if (this.readBuf[0] == 2 && this.readBuf[5] == 3) {
            for (tim = 0; tim <= 7; ++tim) {
                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 64 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 64 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Ready";
                    this.readBuf = new byte[1024];
                    break;
                }
                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 69 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 96 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Head Open";
                    this.readBuf = new byte[1024];
                    break;
                }

                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 64 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 96 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Head Open";
                    this.readBuf = new byte[1024];
                    break;
                }
                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 69 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 72 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Ribbon Jam";
                    this.readBuf = new byte[1024];
                    break;
                }
                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 69 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 68 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Ribbon Empty";
                    this.readBuf = new byte[1024];
                    break;
                }

                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 69 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 65 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "No Paper";
                    this.readBuf = new byte[1024];
                    break;
                }

                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 69 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 66 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Paper Jam";
                    this.readBuf = new byte[1024];
                    break;
                }

                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 69 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 65 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Paper Empty";
                    this.readBuf = new byte[1024];
                    break;
                }

                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 67 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 64 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Cutting";
                    this.readBuf = new byte[1024];
                    break;
                }

                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 75 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 64 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Waiting to Press Print Key";
                    this.readBuf = new byte[1024];
                    break;
                }

                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 76 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 64 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Waiting to Take Label";
                    this.readBuf = new byte[1024];
                    break;
                }

                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 80 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 64 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Printing Batch";
                    this.readBuf = new byte[1024];
                    break;
                }

                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 96 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 64 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Pause";
                    this.readBuf = new byte[1024];
                    break;
                }

                if (this.readBuf[tim] == 2 && this.readBuf[tim + 1] == 69 && this.readBuf[tim + 2] == 64 && this.readBuf[tim + 3] == 64 && this.readBuf[tim + 4] == 64 && this.readBuf[tim + 5] == 3) {
                    this.printerstatus = "Pause";
                    this.readBuf = new byte[1024];
                    break;
                }
            }
        }
        return this.printerstatus;
    }


    //条形码
    public void barcode(int x, int y, String type, int height, int human_readable, int rotation, int narrow, int wide, String string) {
        String message = "";
        String barcode = "BARCODE ";
        String position = x + "," + y;
        String mode = "\"" + type + "\"";
        String height_value = "" + height;
        String human_value = "" + human_readable;
        String rota = "" + rotation;
        String narrow_value = "" + narrow;
        String wide_value = "" + wide;
        String string_value = "\"" + string + "\"";
        message = barcode + position + " ," + mode + " ," + height_value + " ," + human_value + " ," + rota + " ," + narrow_value + " ," + wide_value + " ," + string_value + "\n";
        byte[] msgBuffer = message.getBytes();

        try {
            this.OutStream.write(msgBuffer);
        } catch (IOException var22) {
            var22.printStackTrace();
        }
    }
}
